"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.clear=exports.stdout=void 0;var _fs=_interopRequireDefault(require("fs")),util=_interopRequireWildcard(require("util")),broker=_interopRequireWildcard(require("./libs/broker"));function _interopRequireWildcard(a){if(a&&a.__esModule)return a;var b={};if(null!=a)for(var c in a)if(Object.prototype.hasOwnProperty.call(a,c)){var d=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(a,c):{};d.get||d.set?Object.defineProperty(b,c,d):b[c]=a[c]}return b["default"]=a,b}function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}function _toConsumableArray(a){return _arrayWithoutHoles(a)||_iterableToArray(a)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}function _iterableToArray(a){if(Symbol.iterator in Object(a)||"[object Arguments]"===Object.prototype.toString.call(a))return Array.from(a)}function _arrayWithoutHoles(a){if(Array.isArray(a)){for(var b=0,c=Array(a.length);b<a.length;b++)c[b]=a[b];return c}}function _objectWithoutProperties(a,b){if(null==a)return{};var c,d,e=_objectWithoutPropertiesLoose(a,b);if(Object.getOwnPropertySymbols){var f=Object.getOwnPropertySymbols(a);for(d=0;d<f.length;d++)c=f[d],!(0<=b.indexOf(c))&&Object.prototype.propertyIsEnumerable.call(a,c)&&(e[c]=a[c])}return e}function _objectWithoutPropertiesLoose(a,b){if(null==a)return{};var c,d,e={},f=Object.keys(a);for(d=0;d<f.length;d++)c=f[d],0<=b.indexOf(c)||(e[c]=a[c]);return e}var tinter=broker.tinter,prehandles=_objectWithoutProperties(broker,["tinter"]),clear=function clear(){process.stdout.write("win32"===process.platform?"\x1Bc":"\x1B[2J\x1B[3J\x1B[H")};exports.clear=clear;var format=function format(a){var b=a.output,c=a.method,d=a.options,e=tinter({method:c,output:d[c]}),f=tinter({method:c,output:util.format.apply(util,_toConsumableArray(b))}),g=util.format(e,f);return Object.values(prehandles).forEach(function(a){g=a({output:g,method:c,options:d})}),g},stdout=function stdout(){// console.log('\xbb \x1b[35mstdout <source>:\x1b[0m', JSON.stringify(source));
var a=format.apply(void 0,arguments);if("string"!=typeof a)throw TypeError("The value returned by the result must be a string type.");process.stdout.write("".concat(a,"\n"))};exports.stdout=stdout;