{"version":3,"sources":["../src/stdout.js"],"names":["tinter","broker","prehandles","clear","process","stdout","write","platform","format","output","method","options","formatter","targetOutput","util","Object","values","forEach","handler","outputer","TypeError"],"mappings":"giDAIQA,CAAAA,M,CAA0BC,M,CAA1BD,M,CAAWE,U,0BAAeD,M,aAE5BE,KAAK,CAAG,QAARA,CAAAA,KAAQ,EAAM,CAClBC,OAAO,CAACC,MAAR,CAAeC,KAAf,CAA0C,OAArB,GAAAF,OAAO,CAACG,QAAR,CAA+B,OAA/B,CAAyC,sBAA9D,CACD,C,wBAEKC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,GAAgC,IAA7BC,CAAAA,CAA6B,GAA7BA,MAA6B,CAArBC,CAAqB,GAArBA,MAAqB,CAAbC,CAAa,GAAbA,OAAa,CACvCC,CAAS,CAAGZ,MAAM,CAAC,CAACU,MAAM,CAANA,CAAD,CAASD,MAAM,CAAEE,CAAO,CAACD,CAAD,CAAxB,CAAD,CADqB,CAGzCG,CAAY,CAAGC,IAAI,CAACN,MAAL,OAAAM,IAAI,EAAQF,CAAR,4BAAsBH,CAAtB,GAHsB,CAS7C,MAJAM,CAAAA,MAAM,CAACC,MAAP,CAAcd,UAAd,EAA0Be,OAA1B,CAAkC,SAACC,CAAD,CAAa,CAC7CL,CAAY,CAAGK,CAAO,CAAC,CAAET,MAAM,CAAEI,CAAV,CAAwBH,MAAM,CAANA,CAAxB,CAAgCC,OAAO,CAAPA,CAAhC,CAAD,CACvB,CAFD,CAIA,CAAOE,CACR,C,CAGKR,MAAM,CAAG,QAATA,CAAAA,MAAS,EAAa,CAC1B;AACA,GAAMc,CAAAA,CAAQ,CAAGX,MAAM,MAAN,kBAAjB,CAEA,GAAwB,QAApB,QAAOW,CAAAA,CAAX,CACE,KAAMC,CAAAA,SAAS,CAAC,yDAAD,CAAf,CAGFhB,OAAO,CAACC,MAAR,CAAeC,KAAf,WAAwBa,CAAxB,OACD,C","sourcesContent":["import fs from 'fs';\nimport * as util from 'util';\nimport * as broker from './libs/broker';\n\nconst { tinter, ...prehandles } = broker;\n\nconst clear = () => {\n  process.stdout.write(process.platform === 'win32' ? '\\x1bc' : '\\x1b[2J\\x1b[3J\\x1b[H');\n};\n\nconst format = ({ output, method, options })=> {\n  const formatter = tinter({method, output: options[method]});\n\n  let targetOutput = util.format(formatter, ...output);\n\n  Object.values(prehandles).forEach((handler) => {\n    targetOutput = handler({ output: targetOutput, method, options });\n  });\n\n  return targetOutput;\n}\n\n\nconst stdout = (...argv) => {\n  // console.log('\\xbb \\x1b[35mstdout <source>:\\x1b[0m', JSON.stringify(source));\n  const outputer = format(...argv);\n\n  if (typeof outputer !== 'string') {\n    throw TypeError('The value returned by the result must be a string type.');\n  }\n\n  process.stdout.write(`${outputer}\\n`);\n}\n\n// export const output2file = () => {\n//   fs.writeFile('<path>', '<data>', {}, function callback() {\n//     console.log('');\n//   });\n// }\n\n\nexport { stdout, clear };\n"],"file":"stdout.js"}