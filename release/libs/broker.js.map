{"version":3,"sources":["../../src/libs/broker.js"],"names":["builtIn","output","method","targetOutput","Object","keys","variables","forEach","varName","value","replace","RegExp","emoji","rSign","sign","match","emojiCode","tinter","iterater","str","matcher","$1","$2","colors","styles","wrap","colorWrap","c"],"mappings":"yuCAMO,GAAMA,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,GAAwB,IAArBC,CAAAA,CAAqB,GAArBA,MAAqB,CAAbC,CAAa,GAAbA,MAAa,CACzCC,CAAY,CAAGF,CAD0B,CAY7C,MATAG,CAAAA,MAAM,CAACC,IAAP,CAAYC,SAAZ,EAAuBC,OAAvB,CAA+B,SAACC,CAAD,CAAW,CACxC,GAAIC,CAAAA,CAAK,CAAGH,SAAS,CAACE,CAAD,CAArB,CAEAC,CAAK,CAAoB,UAAjB,QAAOA,CAAAA,CAAP,CAA8BA,CAAK,EAAnC,CAAwCA,CAHR,CAKxCN,CAAY,CAAGA,CAAY,CAACO,OAAb,CAAqB,GAAIC,CAAAA,MAAJ,YAAeH,CAAf,EAA0B,GAA1B,CAArB,CAAqDC,CAArD,CAChB,CAND,CASA,CAAON,CAAY,CAACO,OAAb,CAAqB,SAArB,CAAgCR,CAAhC,CACR,CAbM,C,wBAgBA,GAAMU,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,GAAgB,IAAbX,CAAAA,CAAa,GAAbA,MAAa,CAC7BY,CAAK,CAAG,gBADqB,CAGnC,MAAOZ,CAAAA,CAAM,CAACS,OAAP,CAAeG,CAAf,CAAsB,SAACC,CAAD,CAAOC,CAAP,CAA0B,CACrD,MAAOC,mBAAUD,CAAV,GAAoBD,CAC5B,CAFM,CAGR,CANM,CASP,U,CACA;oBACO,GAAMG,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,GAAwB,CAG5C,QAASC,CAAAA,QAAT,CAAkBC,CAAlB,CAAuB,OACKA,CAAG,CAACJ,KAAJ,CAAU,wBAAV,GAAuC,EAD5C,uBACdK,CADc,MACLC,CADK,MACDC,CADC,QAEiBC,MAAM,CAACC,MAAR,CAAgBH,CAAhB,GAAuB,EAFvC,KAEbI,IAFa,CAEPC,CAFO,YAEK,SAAAC,CAAC,QAAIA,CAAAA,CAAJ,CAFN,SAIE,WAAnB,QAAOP,CAAAA,CAJU,CAIsBD,CAJtB,CAMdD,QAAQ,CAACC,CAAG,CAACT,OAAJ,CAAYU,CAAZ,CAAqBM,CAAS,CAACJ,CAAD,CAA9B,CAAD,CAChB,CAV2C,GAArBrB,CAAAA,CAAqB,GAArBA,MAAqB,CAAbC,CAAa,GAAbA,MAAa,CAY5C,MAAOgB,CAAAA,QAAQ,CAACjB,CAAD,CAChB,CAbM,C","sourcesContent":["import * as util from 'util';\nimport * as colors from 'ansi-colors';\nimport * as variables from './variables';\n\nimport emojiCode from './emoji';\n\nexport const builtIn = ({ output, method }) => {\n  let targetOutput = output;\n\n  Object.keys(variables).forEach((varName)=>{\n    let value = variables[varName];\n\n    value = typeof value === 'function' ? value() : value;\n\n    targetOutput = targetOutput.replace(new RegExp(`:${varName}`, 'g'), value);\n  });\n\n\n  return targetOutput.replace(':method', method);\n};\n\n\nexport const emoji = ({ output }) => {\n  const rSign = /\\:i\\-([a-z]+)/g;\n\n  return output.replace(rSign, (sign, match, ...argv) => {\n    return emojiCode[match] || sign;\n  });\n};\n\n\n/* 输出着色 */\n// console.log(colors.styles);\nexport const tinter = ({ output, method }) => {\n  let stack = [];\n\n  function iterater(str) {\n    const [matcher, $1, $2] = str.match(/#(\\w+)\\(([^#\\(\\))]+)\\)/) || [];\n    const { wrap: colorWrap = c => c } = (colors.styles)[$1] || {};\n\n    if (typeof matcher === 'undefined') return str;\n\n    return iterater(str.replace(matcher, colorWrap($2)));\n  }\n\n  return iterater(output);\n};\n\n"],"file":"broker.js"}